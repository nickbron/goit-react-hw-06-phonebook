{"version":3,"sources":["Componets/ContactForm/ContactForm.styled.jsx","redux/actions.js","Componets/ContactForm/ContactForm.jsx","Componets/ContactList/ContactList.styled.jsx","Componets/ContactList/ContactList.jsx","Componets/Filter/Filter.jsx","Componets/App.styled.jsx","Componets/App.jsx","redux/store.js","index.js"],"names":["Form","styled","form","Input","input","Button","button","addItem","createAction","name","number","payload","id","shortid","generate","removeItem","filterItem","connect","state","contacts","items","dispatch","onAdd","actions","useState","setName","setNumber","handleInputChange","e","target","value","reset","onSubmit","preventDefault","type","pattern","title","onChange","required","filter","normalizedFilter","toLowerCase","contact","includes","onDeleteContact","length","map","onClick","autoComplete","Card","div","App","className","PersistConfig","key","storage","blacklist","reducerItems","createReducer","reducerFilter","_","contactsReducer","combineReducers","store","configureStore","reducer","persistReducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","devTools","process","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"qQAEaA,EAAOC,IAAOC,KAAV,yEAKJC,EAAQF,IAAOG,MAAV,8JAULC,EAASJ,IAAOK,OAAV,mf,cCFJ,GAAEC,QAZDC,YAAa,aAAa,SAACC,EAAMC,GAAP,MAAmB,CAC3DC,QAAS,CACPC,GAAIC,IAAQC,WACZL,OACAC,cAQsBK,WAJPP,YAAa,gBAIMQ,WAFnBR,YAAa,iB,OCkDhC,I,EAYeS,eAZS,SAAAC,GACtB,MAAO,CACLC,SAAUD,EAAMC,SAASC,UAIF,SAAAC,GACzB,MAAO,CACLC,MAAO,SAACb,EAAMC,GAAP,OAAkBW,EAASE,EAAQhB,QAAQE,EAAMC,QAI7CO,EArEf,YAAiC,IAAVK,EAAS,EAATA,MACrB,EAAwBE,mBAAS,IAAjC,mBAAOf,EAAP,KAAagB,EAAb,KACA,EAA4BD,mBAAS,IAArC,mBAAOd,EAAP,KAAegB,EAAf,KAEMC,EAAoB,SAAAC,GACxB,MAAwBA,EAAEC,OAAlBpB,EAAR,EAAQA,KAAMqB,EAAd,EAAcA,MAEd,OAAQrB,GACN,IAAK,OACHgB,EAAQK,GACR,MACF,IAAK,SACHJ,EAAUI,KAaVC,EAAQ,WACZN,EAAQ,IACRC,EAAU,KAGZ,OACE,8BACE,eAAC1B,EAAD,CAAMgC,SAbW,SAAAJ,GACnBA,EAAEK,iBACFX,EAAMb,EAAMC,GACZqB,KAUE,UACE,cAAC5B,EAAD,CACE+B,KAAK,OACLzB,KAAK,OACL0B,QAAQ,yHACRC,MAAM,kcACNN,MAAOrB,EACP4B,SAAUV,EACVW,UAAQ,IAEV,cAACnC,EAAD,CACE+B,KAAK,MACLzB,KAAK,SACL0B,QAAQ,yFACRC,MAAM,giBACNN,MAAOpB,EACP2B,SAAUV,EACVW,UAAQ,IAEV,cAACjC,EAAD,CAAQ6B,KAAK,SAAb,iCCxDK7B,EAASJ,IAAOK,OAAV,+eC0BnB,IAkBeW,eAlBS,SAAAC,GACtB,MAA0BA,EAAMC,SAAxBoB,EAAR,EAAQA,OAAQnB,EAAhB,EAAgBA,MACVoB,EAAmBD,EAAOE,cAKhC,MAAO,CACLtB,SALmBC,EAAMmB,QAAO,SAAAG,GAAO,OACvCA,EAAQjC,KAAKgC,cAAcE,SAASH,UAQb,SAAAnB,GACzB,MAAO,CACLuB,gBAAiB,SAAAnC,GAAI,OAAIY,EAASE,EAAQR,WAAWN,QAI1CQ,EAxCf,YAAqD,IAA9BE,EAA6B,EAA7BA,SAAUyB,EAAmB,EAAnBA,gBAC/B,OACE,mCACGzB,EAAS0B,OAAS,EACjB,6BACG1B,EAAS2B,KAAI,SAAAJ,GAAO,OACnB,+BACE,iCAAOA,EAAQjC,KAAf,OACA,+BAAOiC,EAAQhC,SACf,cAAC,EAAD,CAAQqC,QAAS,kBAAMH,EAAgBF,EAAQ9B,KAAKsB,KAAK,SAAzD,sBAHOQ,EAAQ9B,SAUrB,2DCFR,I,EAYeK,eAZS,SAAAC,GACtB,MAAO,CACLqB,OAAQrB,EAAMC,SAASoB,WAIA,SAAAlB,GACzB,MAAO,CACLgB,SAAU,SAAAT,GAAC,OAAIP,EAASE,EAAQP,WAAWY,EAAEC,OAAOC,YAIzCb,EA3Bf,YAAuC,IAArBsB,EAAoB,EAApBA,OAAQF,EAAY,EAAZA,SACxB,OACE,8DAEE,cAAClC,EAAD,CACE+B,KAAK,OACLzB,KAAK,SACLuC,aAAa,MACblB,MAAOS,EACPF,SAAUA,UCXLY,EAAOhD,IAAOiD,IAAV,4GCKF,SAASC,IACtB,OACE,eAACF,EAAD,WACE,oBAAIG,UAAU,QAAd,uBAEA,cAAC,EAAD,IAEA,oBAAIA,UAAU,QAAd,sBAEA,cAAC,EAAD,IAEA,cAAC,EAAD,O,4CCFAC,EAAgB,CACpBC,IAAK,WACLC,Q,OAAAA,EACAC,UAAW,CAAC,WAGRC,EAAeC,YAAc,IAAD,mBAC/BnC,EAAQhB,SAAU,SAACW,EAAD,OAAUP,EAAV,EAAUA,QAAV,4BAA4BO,GAA5B,CAAmCP,OADtB,cAE/BY,EAAQR,YAAa,SAACG,EAAD,OAAUP,EAAV,EAAUA,QAAV,OACpBO,EAAMqB,QAAO,SAAAG,GAAO,OAAIA,EAAQ9B,KAAOD,QAHT,IAM5BgD,EAAgBD,YAAc,GAAD,eAChCnC,EAAQP,YAAa,SAAC4C,EAAD,YAAMjD,YAGxBkD,EAAkBC,YAAgB,CACtC1C,MAAOqC,EACPlB,OAAQoB,IAGJI,EAAQC,YAAe,CAC3BC,QAAS,CACP9C,SAAU+C,YAAeb,EAAeQ,IAE1CM,WAAY,SAAAC,GAAoB,OAC9BA,EAAqB,CACnBC,kBAAmB,CACjBC,eAAgB,CAACC,IAAOC,IAAWC,IAAOC,IAASC,IAAOC,SAGhEC,UAAUC,IAKG,GAAEf,QAAOgB,UAFNC,YAAajB,I,QCtC/BkB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUpB,MAAOA,EAAMA,MAAvB,SACE,cAAC,IAAD,CAAaqB,QAAS,KAAML,UAAWhB,EAAMgB,UAA7C,SACE,cAAC5B,EAAD,UAINkC,SAASC,eAAe,W","file":"static/js/main.96561834.chunk.js","sourcesContent":["import styled from '@emotion/styled';\r\n\r\nexport const Form = styled.form`\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nexport const Input = styled.input`\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin-bottom: 10px;\r\n  width: 50%;\r\n  :focus {\r\n    border: 3px solid #555;\r\n  }\r\n`;\r\n\r\nexport const Button = styled.button`\r\n  display: inline-block;\r\n  padding: 5px 10px;\r\n  margin-left: 10px;\r\n  font-size: 14px;\r\n  width: 100px;\r\n  cursor: pointer;\r\n  text-align: center;\r\n  text-decoration: none;\r\n  outline: none;\r\n  color: #fff;\r\n  background-color: #4caf50;\r\n  border: none;\r\n  border-radius: 15px;\r\n  box-shadow: 0 9px #999;\r\n\r\n  :hover {\r\n    background-color: #3e8e41;\r\n  }\r\n  :active {\r\n    background-color: #3e8e41;\r\n    box-shadow: 0 5px #666;\r\n    transform: translateY(4px);\r\n  }\r\n`;\r\n","import shortid from 'shortid';\nimport { createAction } from '@reduxjs/toolkit';\n\nconst addItem = createAction('items/Add', (name, number) => ({\n  payload: {\n    id: shortid.generate(),\n    name,\n    number,\n  },\n}));\n\nconst removeItem = createAction('items/Remove');\n\nconst filterItem = createAction('items/Filter');\n\nexport default { addItem, removeItem, filterItem };\n","import { useState } from 'react';\r\nimport { Button, Input, Form } from './ContactForm.styled';\r\n\r\nimport { connect } from 'react-redux';\r\nimport actions from '../../redux/actions';\r\n\r\nfunction ContactForm({ onAdd }) {\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n\r\n  const handleInputChange = e => {\r\n    const { name, value } = e.target;\r\n\r\n    switch (name) {\r\n      case 'name':\r\n        setName(value);\r\n        break;\r\n      case 'number':\r\n        setNumber(value);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    onAdd(name, number);\r\n    reset();\r\n  };\r\n\r\n  const reset = () => {\r\n    setName('');\r\n    setNumber('');\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Form onSubmit={handleSubmit}>\r\n        <Input\r\n          type=\"text\"\r\n          name=\"name\"\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n          value={name}\r\n          onChange={handleInputChange}\r\n          required\r\n        />\r\n        <Input\r\n          type=\"tel\"\r\n          name=\"number\"\r\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n          value={number}\r\n          onChange={handleInputChange}\r\n          required\r\n        />\r\n        <Button type=\"submit\">Add contact</Button>\r\n      </Form>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    contacts: state.contacts.items,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onAdd: (name, number) => dispatch(actions.addItem(name, number)),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\r\n","import styled from '@emotion/styled';\r\nexport const Button = styled.button`\r\n  display: inline-block;\r\n  padding: 5px 5px;\r\n  margin-left: 10px;\r\n  font-size: 10px;\r\n  width: 50px;\r\n  cursor: pointer;\r\n  text-align: center;\r\n  text-decoration: none;\r\n  outline: none;\r\n  color: #fff;\r\n  background-color: #4caf50;\r\n  border: none;\r\n  border-radius: 15px;\r\n  /* box-shadow: 0 9px #999; */\r\n\r\n  :hover {\r\n    background-color: red;\r\n  }\r\n  :active {\r\n    background-color: red;\r\n    box-shadow: 0 5px #666;\r\n    transform: translateY(4px);\r\n  }\r\n`;\r\n","import PropTypes from 'prop-types';\r\nimport { Button } from '../ContactList/ContactList.styled';\r\nimport { connect } from 'react-redux';\r\nimport actions from '../../redux/actions';\r\n\r\nfunction ContactList({ contacts, onDeleteContact }) {\r\n  return (\r\n    <>\r\n      {contacts.length > 0 ? (\r\n        <ul>\r\n          {contacts.map(contact => (\r\n            <li key={contact.id}>\r\n              <span>{contact.name}:</span>\r\n              <span>{contact.number}</span>\r\n              <Button onClick={() => onDeleteContact(contact.id)} type=\"button\">\r\n                Delete\r\n              </Button>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      ) : (\r\n        <p>Contact list is empty</p>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  const { filter, items } = state.contacts;\r\n  const normalizedFilter = filter.toLowerCase();\r\n  const findContacts = items.filter(contact =>\r\n    contact.name.toLowerCase().includes(normalizedFilter),\r\n  );\r\n\r\n  return {\r\n    contacts: findContacts,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onDeleteContact: name => dispatch(actions.removeItem(name)),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    }),\r\n  ),\r\n  //   onDeleteContact: PropTypes.func.isRequired,\r\n};\r\n\r\n//export default ContactList;\r\n","import { Input } from '../ContactForm/ContactForm.styled';\r\nimport { connect } from 'react-redux';\r\nimport actions from '../../redux/actions';\r\n\r\nfunction Filter({ filter, onChange }) {\r\n  return (\r\n    <>\r\n      Find contacts by name:\r\n      <Input\r\n        type=\"text\"\r\n        name=\"filter\"\r\n        autoComplete=\"off\"\r\n        value={filter}\r\n        onChange={onChange}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    filter: state.contacts.filter,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onChange: e => dispatch(actions.filterItem(e.target.value)),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import styled from '@emotion/styled';\r\n\r\nexport const Card = styled.div`\r\n  width: 400px;\r\n  padding: 20px;\r\n  margin: 20px;\r\n  border: 1px solid black;\r\n`;\r\n","import { useState, useEffect } from 'react';\nimport shortid from 'shortid';\nimport ContactForm from 'Componets/ContactForm/ContactForm';\nimport ContactList from 'Componets/ContactList/ContactList';\nimport Filter from 'Componets/Filter/Filter';\nimport { Card } from './App.styled';\n\nexport default function App() {\n  return (\n    <Card>\n      <h1 className=\"title\">Phonebook</h1>\n\n      <ContactForm />\n\n      <h2 className=\"title\">Contacts</h2>\n\n      <Filter />\n\n      <ContactList />\n    </Card>\n  );\n}\n","import { combineReducers } from 'redux';\nimport { configureStore } from '@reduxjs/toolkit';\nimport { createReducer } from '@reduxjs/toolkit';\nimport actions from './actions';\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\n\nconst PersistConfig = {\n  key: 'contacts',\n  storage,\n  blacklist: ['filter'],\n};\n\nconst reducerItems = createReducer([], {\n  [actions.addItem]: (state, { payload }) => [...state, payload],\n  [actions.removeItem]: (state, { payload }) =>\n    state.filter(contact => contact.id !== payload),\n});\n\nconst reducerFilter = createReducer('', {\n  [actions.filterItem]: (_, { payload }) => payload,\n});\n\nconst contactsReducer = combineReducers({\n  items: reducerItems,\n  filter: reducerFilter,\n});\n\nconst store = configureStore({\n  reducer: {\n    contacts: persistReducer(PersistConfig, contactsReducer),\n  },\n  middleware: getDefaultMiddleware =>\n    getDefaultMiddleware({\n      serializableCheck: {\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n      },\n    }),\n  devTools: process.env.NODE_ENV === 'development',\n});\n\nconst persistor = persistStore(store);\n\nexport default { store, persistor };\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from 'Componets/App';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\nimport { PersistGate } from 'redux-persist/integration/react';\n//import { myAction } from './redux/actions';\n\n// console.log(store.getState());\n//store.dispatch(myAction(5));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={null} persistor={store.persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}