{"version":3,"sources":["Componets/ContactForm/ContactForm.styled.jsx","redux/actions.js","Componets/ContactForm/ContactForm.jsx","Componets/ContactList/ContactList.styled.jsx","Componets/ContactList/ContactList.jsx","Componets/Filter/Filter.jsx","Componets/App.styled.jsx","Componets/App.jsx","redux/contacts-reducer.js","redux/store.js","index.js"],"names":["Form","styled","form","Input","input","Button","button","addItem","createAction","name","number","payload","id","shortid","generate","removeItem","filterItem","ContactForm","contacts","useSelector","state","items","dispatch","useDispatch","onSubmit","e","preventDefault","target","console","log","find","contact","toLowerCase","value","alert","actions","handleSubmit","type","pattern","title","required","ContactList","filter","normalizedFilter","includes","length","map","onClick","Filter","autoComplete","onChange","Card","div","App","className","reducerItems","createReducer","reducerFilter","_","combineReducers","PersistConfig","key","storage","blacklist","store","configureStore","reducer","persistReducer","contactsReducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","devTools","process","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.b0838cb2.chunk.js","sourcesContent":["import styled from '@emotion/styled';\r\n\r\nexport const Form = styled.form`\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nexport const Input = styled.input`\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin-bottom: 10px;\r\n  width: 50%;\r\n  :focus {\r\n    border: 3px solid #555;\r\n  }\r\n`;\r\n\r\nexport const Button = styled.button`\r\n  display: inline-block;\r\n  padding: 5px 10px;\r\n  margin-left: 10px;\r\n  font-size: 14px;\r\n  width: 100px;\r\n  cursor: pointer;\r\n  text-align: center;\r\n  text-decoration: none;\r\n  outline: none;\r\n  color: #fff;\r\n  background-color: #4caf50;\r\n  border: none;\r\n  border-radius: 15px;\r\n  box-shadow: 0 9px #999;\r\n\r\n  :hover {\r\n    background-color: #3e8e41;\r\n  }\r\n  :active {\r\n    background-color: #3e8e41;\r\n    box-shadow: 0 5px #666;\r\n    transform: translateY(4px);\r\n  }\r\n`;\r\n","import shortid from 'shortid';\nimport { createAction } from '@reduxjs/toolkit';\n\nconst addItem = createAction('items/Add', (name, number) => ({\n  payload: {\n    id: shortid.generate(),\n    name,\n    number,\n  },\n}));\n\nconst removeItem = createAction('items/Remove');\n\nconst filterItem = createAction('items/Filter');\n\nexport default { addItem, removeItem, filterItem };\n","import { Button, Input, Form } from './ContactForm.styled';\r\n\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport actions from '../../redux/actions';\r\n\r\nconst handleSubmit = (e, contacts, dispatch) => {\r\n  e.preventDefault();\r\n  const { name, number } = e.target;\r\n  console.log('contacts', contacts);\r\n\r\n  if (\r\n    contacts.find(\r\n      contact => contact.name.toLowerCase() === name.value.toLowerCase(),\r\n    )\r\n  ) {\r\n    alert(`Attention ${name.value} is already in contacts.`);\r\n    return;\r\n  }\r\n\r\n  dispatch(actions.addItem(name.value, number.value));\r\n\r\n  name.value = '';\r\n  number.value = '';\r\n};\r\n\r\nexport default function ContactForm() {\r\n  const contacts = useSelector(state => state.contacts.items);\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <div>\r\n      <Form onSubmit={e => handleSubmit(e, contacts, dispatch)}>\r\n        <Input\r\n          type=\"text\"\r\n          name=\"name\"\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n        />\r\n        <Input\r\n          type=\"tel\"\r\n          name=\"number\"\r\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n          required\r\n        />\r\n        <Button type=\"submit\">Add contact</Button>\r\n      </Form>\r\n    </div>\r\n  );\r\n}\r\n","import styled from '@emotion/styled';\r\nexport const Button = styled.button`\r\n  display: inline-block;\r\n  padding: 5px 5px;\r\n  margin-left: 10px;\r\n  font-size: 10px;\r\n  width: 50px;\r\n  cursor: pointer;\r\n  text-align: center;\r\n  text-decoration: none;\r\n  outline: none;\r\n  color: #fff;\r\n  background-color: #4caf50;\r\n  border: none;\r\n  border-radius: 15px;\r\n  /* box-shadow: 0 9px #999; */\r\n\r\n  :hover {\r\n    background-color: red;\r\n  }\r\n  :active {\r\n    background-color: red;\r\n    box-shadow: 0 5px #666;\r\n    transform: translateY(4px);\r\n  }\r\n`;\r\n","import PropTypes from 'prop-types';\r\nimport { Button } from '../ContactList/ContactList.styled';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport actions from '../../redux/actions';\r\n\r\nexport default function ContactList() {\r\n  const { contacts } = useSelector(state => {\r\n    const { filter, items } = state.contacts;\r\n    const normalizedFilter = filter.toLowerCase();\r\n    const findContacts = items.filter(contact =>\r\n      contact.name.toLowerCase().includes(normalizedFilter),\r\n    );\r\n    return {\r\n      contacts: findContacts,\r\n    };\r\n  });\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <>\r\n      {contacts.length > 0 ? (\r\n        <ul>\r\n          {contacts.map(contact => (\r\n            <li key={contact.id}>\r\n              <span>{contact.name}:</span>\r\n              <span>{contact.number}</span>\r\n              <Button\r\n                onClick={() => dispatch(actions.removeItem(contact.id))}\r\n                type=\"button\"\r\n              >\r\n                Delete\r\n              </Button>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      ) : (\r\n        <p>Contact list is empty</p>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    }),\r\n  ),\r\n};\r\n","import { Input } from '../ContactForm/ContactForm.styled';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport actions from '../../redux/actions';\r\n\r\nexport default function Filter() {\r\n  const filter = useSelector(state => state.contacts.filter);\r\n  const dispatch = useDispatch();\r\n  return (\r\n    <>\r\n      Find contacts by name:\r\n      <Input\r\n        type=\"text\"\r\n        name=\"filter\"\r\n        autoComplete=\"off\"\r\n        value={filter}\r\n        onChange={e => dispatch(actions.filterItem(e.target.value))}\r\n      />\r\n    </>\r\n  );\r\n}\r\n","import styled from '@emotion/styled';\r\n\r\nexport const Card = styled.div`\r\n  width: 400px;\r\n  padding: 20px;\r\n  margin: 20px;\r\n  border: 1px solid black;\r\n`;\r\n","import ContactForm from 'Componets/ContactForm/ContactForm';\nimport ContactList from 'Componets/ContactList/ContactList';\nimport Filter from 'Componets/Filter/Filter';\nimport { Card } from './App.styled';\n\nexport default function App() {\n  return (\n    <Card>\n      <h1 className=\"title\">Phonebook</h1>\n\n      <ContactForm />\n\n      <h2 className=\"title\">Contacts</h2>\n\n      <Filter />\n\n      <ContactList />\n    </Card>\n  );\n}\n","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\nimport actions from './actions';\n\nconst reducerItems = createReducer([], {\n  [actions.addItem]: (state, { payload }) => [...state, payload],\n  [actions.removeItem]: (state, { payload }) =>\n    state.filter(contact => contact.id !== payload),\n});\n\nconst reducerFilter = createReducer('', {\n  [actions.filterItem]: (_, { payload }) => payload,\n});\n\nexport default combineReducers({\n  items: reducerItems,\n  filter: reducerFilter,\n});\n","import { configureStore } from '@reduxjs/toolkit';\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport contactsReducer from './contacts-reducer';\n\nconst PersistConfig = {\n  key: 'contacts',\n  storage,\n  blacklist: ['filter'],\n};\n\nconst store = configureStore({\n  reducer: {\n    contacts: persistReducer(PersistConfig, contactsReducer),\n  },\n  middleware: getDefaultMiddleware =>\n    getDefaultMiddleware({\n      serializableCheck: {\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n      },\n    }),\n  devTools: process.env.NODE_ENV === 'development',\n});\n\nconst persistor = persistStore(store);\n\nexport default { store, persistor };\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from 'Componets/App';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\nimport { PersistGate } from 'redux-persist/integration/react';\n//import { myAction } from './redux/actions';\n\n// console.log(store.getState());\n//store.dispatch(myAction(5));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={null} persistor={store.persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}